name: Ops Notify (Failure/Recovery)

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["CI", "Deploy Next.js App to Cloudflare"]
    types: [completed]

permissions:
  actions: read
  contents: read
  issues: write
  pull-requests: write

jobs:
  failure:
    if: ${{ github.event.workflow_run.conclusion != 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Summarize failing jobs and steps
        id: build_summary
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            const run = context.payload.workflow_run;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({ owner, repo, run_id: run.id, per_page: 100 });
            const failedJobs = (jobs.jobs || []).filter((job) => job.conclusion && job.conclusion !== 'success');
            const rerunUrl = `${run.html_url}/rerun`;
            const logsUrl = `${run.html_url}?check_suite_focus=true`;
            const commitLine = run.head_commit ? `${run.head_commit.id.slice(0,7)} 鈥?${run.head_commit.message}` : 'n/a';
            let body = `鉂?Workflow "${run.name}" #${run.run_number} failed\n` +
              `Run: ${run.html_url}\nRe-run (requires permissions): ${rerunUrl}\nLogs: ${logsUrl}\n` +
              `Event: ${run.event}\nCommit: ${commitLine}\n\n`;
            for (const job of failedJobs) {
              body += `鈥?Job: ${job.name} 鈥?conclusion: ${job.conclusion}\n  Logs: ${job.html_url}\n`;
              const failedSteps = (job.steps || []).filter((step) => step.conclusion === 'failure');
              if (failedSteps.length) {
                body += `  Failed steps:\n`;
                for (const step of failedSteps) body += `    - ${step.name}\n`;
              }
            }
            body += `\nAuto remediation workflows triggered:\n- auto-fix.yml (deterministic formatting & lockfile fixes)\n- ai-auto-fix (built-in in auto-fix when OPENAI_API_KEY configured)\n`;
            core.setOutput('body', body);

      - name: Comment on PR (if available)
        if: ${{ github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0] }}
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        env:
          BODY: ${{ steps.build_summary.outputs.body }}
        with:
          script: |
            const run = context.payload.workflow_run;
            const pr = run.pull_requests[0];
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr.number, body: process.env.BODY });

      - name: Open/append tracking issue (dedup)
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        env:
          BODY: ${{ steps.build_summary.outputs.body }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const title = 'CI/CD Failure Tracker';
            const { data: issues } = await github.rest.issues.listForRepo({ owner, repo, state: 'open', labels: 'ci-failure' });
            let tracker = issues.find((issue) => issue.title === title);
            if (!tracker) {
              tracker = (await github.rest.issues.create({ owner, repo, title, body: 'Tracking CI/CD failures', labels: ['ci-failure'] })).data;
            }
            await github.rest.issues.createComment({ owner, repo, issue_number: tracker.number, body: process.env.BODY });

  recovery:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Close tracker on success
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        with:
          script: |
            const run = context.payload.workflow_run;
            const { owner, repo } = context.repo;
            const title = 'CI/CD Failure Tracker';
            const body = [`鉁?Workflow "${run.name}" #${run.run_number} succeeded`,`Run: ${run.html_url}`,`Event: ${run.event}`].join('\n');
            const { data: issues } = await github.rest.issues.listForRepo({ owner, repo, state: 'open', labels: 'ci-failure' });
            const tracker = issues.find((i) => i.title === title);
            if (!tracker) return;
            await github.rest.issues.createComment({ owner, repo, issue_number: tracker.number, body });
            await github.rest.issues.update({ owner, repo, issue_number: tracker.number, state: 'closed' });

