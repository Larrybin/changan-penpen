name: CI

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - main
    paths-ignore:
      - README.md
      - docs/**
  pull_request:
    branches-ignore:
      - main
    paths-ignore:
      - README.md
      - docs/**
  workflow_call:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'
  NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL || 'http://localhost:3000' }}

jobs:
  lint-docs:
    name: Lint & docs (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        node-version: ['20', '22']
    env:
      NODE_VERSION: ${{ matrix.node-version }}
    steps:
      - &checkout
        name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          cache-key-suffix: "-ci-${{ matrix.node-version }}"

      - &install
        name: Install dependencies (composite)
        uses: ./.github/actions/install-and-heal

      - name: Run i18n normalization
        run: pnpm run fix:i18n

      - name: Ensure i18n is normalized (no diff)
        run: |
          git diff --exit-code -- src/i18n/messages || (echo "i18n files not normalized. Run 'pnpm run fix:i18n' and commit changes." && exit 1)

      - name: Lint (Biome)
        run: pnpm exec biome check .

      - name: Generate OpenAPI snapshot
        run: pnpm run openapi:generate

      - name: Verify OpenAPI snapshot
        run: pnpm run openapi:check

      - name: Lint OpenAPI schema (Spectral)
        run: pnpm run openapi:lint

      # Removed docs consistency step to speed up CI and avoid non-critical failures

      - name: Link check (local markdown)
        run: pnpm run check:links

  typecheck:
    name: Type check (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        node-version: ['20', '22']
    env:
      NODE_VERSION: ${{ matrix.node-version }}
    steps:
      - *checkout
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          cache-key-suffix: "-typecheck-${{ matrix.node-version }}"
      - *install
      - name: Type check (tsc)
        run: pnpm exec tsc --noEmit

  supply-chain:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request'
    steps:
      - *checkout
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          cache-key-suffix: "-security"

      - name: Secret scan (gitleaks)
        env:
          GITLEAKS_VERSION: '8.18.2'
        run: |
          set -euo pipefail
          echo "::group::Installing Gitleaks"
          curl -sSfL "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz" \
            -o /tmp/gitleaks.tar.gz
          tar -xzf /tmp/gitleaks.tar.gz -C /tmp
          echo "::endgroup::"

          echo "::group::Running Gitleaks secret detection"
          if /tmp/gitleaks detect --source . --no-banner --redact --verbose; then
            echo "âœ… No secrets detected"
          else
            echo "::error::Secrets detected in repository! Please review and fix before merging."
            exit 1
          fi
          echo "::endgroup::"

      - name: Check for duplicate dependencies
        run: |
          echo "::group::Checking for duplicate dependencies"
          if pnpm dedupe --check; then
            echo "âœ… No duplicate dependencies found"
          else
            echo "::warning::Duplicate dependencies detected. Consider running 'pnpm dedupe'"
          fi
          echo "::endgroup::"

      - name: Security audit (enhanced)
        run: |
          echo "::group::Running security audit on production dependencies"

          # First check for high/critical vulnerabilities
          high_vulns=$(pnpm audit --prod --audit-level high --json | jq -r '.vulnerabilities | length' 2>/dev/null || echo "0")

          if [[ "$high_vulns" -gt 0 ]]; then
            echo "::error::Found $high_vulns high/critical vulnerabilities:"
            pnpm audit --prod --audit-level high
            echo ""
            echo "ðŸ”§ To fix vulnerabilities:"
            echo "  1. Run 'pnpm audit --fix' locally"
            echo "  2. Or manually update affected packages"
            echo "  3. For more info: https://pnpm.io/cli/audit"
            exit 1
          fi

          # Check for moderate vulnerabilities and warn
          if pnpm audit --prod --audit-level moderate 2>/dev/null | grep -q "vulnerabilities"; then
            echo "::warning::Moderate vulnerabilities detected. Consider updating dependencies."
            pnpm audit --prod --audit-level moderate
          else
            echo "âœ… No production vulnerabilities found"
          fi

          echo "::endgroup::"

      - name: License compliance check
        run: |
          echo "::group::Checking license compliance"
          if command -v npx >/dev/null 2>&1; then
            npx license-checker --summary --excludePrivatePackages || echo "::warning::License check failed"
          else
            echo "::warning::License checker not available"
          fi
          echo "::endgroup::"

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - lint-docs
      - typecheck
    steps:
      - *checkout
      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          cache-key-suffix: "-build"
      - *install

      - name: Cache Next.js build cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('next.config.*', 'package.json', 'tsconfig.json', 'tsconfig.*.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: Show NEXT_PUBLIC_APP_URL (diagnostic)
        run: echo "NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL"

      - name: Build (Next.js)
        run: pnpm build

      - name: Upload Next.js build artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: next-build
          path: .next
          retention-days: 2
