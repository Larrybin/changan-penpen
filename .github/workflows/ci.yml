name: CI

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - main
    paths-ignore:
      - README.md
      - docs/**
  pull_request:
    branches-ignore:
      - main
    paths-ignore:
      - README.md
      - docs/**
  workflow_call:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'
  NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL || 'http://localhost:3000' }}

jobs:
  lint-docs:
    name: Lint & docs (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        node-version: ['20', '22']
    env:
      NODE_VERSION: ${{ matrix.node-version }}
    steps:
      - &checkout
        name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - &setup-pnpm
        name: Setup pnpm
        uses: pnpm/action-setup@36de12bed180fa130ed56a35e7344f2fa7a820ab
        with:
          version: ${{ env.PNPM_VERSION }}

      - &setup-node
        name: Setup Node
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903
        with:
          node-version: ${{ env.NODE_VERSION }}

      - &install
        name: Install dependencies (composite)
        uses: ./.github/actions/install-and-heal

      - name: Run i18n normalization
        run: pnpm run fix:i18n

      - name: Ensure i18n is normalized (no diff)
        run: |
          git diff --exit-code -- src/i18n/messages || (echo "i18n files not normalized. Run 'pnpm run fix:i18n' and commit changes." && exit 1)

      - name: Lint (Biome)
        run: pnpm exec biome check .

      - name: Generate OpenAPI snapshot
        run: pnpm run openapi:generate

      - name: Verify OpenAPI snapshot
        run: pnpm run openapi:check

      - name: Lint OpenAPI schema (Spectral)
        run: pnpm run openapi:lint

      # Removed docs consistency step to speed up CI and avoid non-critical failures

      - name: Link check (local markdown)
        run: pnpm run check:links

  typecheck:
    name: Type check (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        node-version: ['20', '22']
    env:
      NODE_VERSION: ${{ matrix.node-version }}
    steps:
      - *checkout
      - *setup-pnpm
      - *setup-node
      - *install

      - name: Type check (tsc)
        run: pnpm exec tsc --noEmit

  supply-chain:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request'
    steps:
      - *checkout
      - *setup-pnpm
      - *setup-node

      - name: Secret scan (gitleaks)
        env:
          GITLEAKS_VERSION: '8.18.2'
        run: |
          set -euo pipefail
          curl -sSfL "https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz" \
            -o /tmp/gitleaks.tar.gz
          tar -xzf /tmp/gitleaks.tar.gz -C /tmp
          /tmp/gitleaks detect --source . --no-banner --redact

      - name: Check for duplicate dependencies
        run: pnpm dedupe --check

      - name: Audit production dependencies
        run: pnpm audit --prod --audit-level high

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - lint-docs
      - typecheck
    steps:
      - *checkout
      - *setup-pnpm
      - *setup-node
      - *install

      - name: Cache Next.js build cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('next.config.*', 'package.json', 'tsconfig.json', 'tsconfig.*.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: Show NEXT_PUBLIC_APP_URL (diagnostic)
        run: echo "NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL"

      - name: Build (Next.js)
        run: pnpm build
