name: Deploy Next.js App to Cloudflare

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - README.md
      - docs/**
  pull_request:
    branches: [main]
    paths-ignore:
      - README.md
      - docs/**

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL || 'http://localhost:3000' }}

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quality gate（复用自 CI）
  quality-gate-reusable:
    name: Quality Gate
    uses: ./.github/workflows/ci.yml
    secrets: inherit
  # Deploy preview for pull requests
  deploy-preview:
    name: Deploy Preview
    if: github.event_name == 'pull_request'
    needs: [quality-gate-reusable]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Setup pnpm
        uses: pnpm/action-setup@36de12bed180fa130ed56a35e7344f2fa7a820ab
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Check required secrets
        id: preview-secrets
        run: |
          missing=()
          for var in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID BETTER_AUTH_SECRET GOOGLE_CLIENT_ID GOOGLE_CLIENT_SECRET CLOUDFLARE_R2_URL CREEM_API_KEY CREEM_WEBHOOK_SECRET; do
            value="${!var}"
            if [ -z "$value" ]; then
              missing+=("$var")
            fi
          done

          if [ "${#missing[@]}" -eq 0 ]; then
            echo "available=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "available=false" >> "$GITHUB_OUTPUT"
          echo "Preview deployment skipped. Missing secrets: ${missing[*]}"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}
          CREEM_API_KEY: ${{ secrets.CREEM_API_KEY }}
          CREEM_WEBHOOK_SECRET: ${{ secrets.CREEM_WEBHOOK_SECRET }}

      - name: Cache OpenNext build
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: |
            .next/cache
            .open-next
          key: ${{ runner.os }}-opennext-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-opennext-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: Install dependencies (composite)
        uses: ./.github/actions/install-and-heal

      - name: Generate Cloudflare types
        if: steps.preview-secrets.outputs.available == 'true'
        run: pnpm run cf-typegen
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Build Next.js (diagnostic)
        run: pnpm run build
        env:
          # 显式注入以避免 fork PR 缺省环境导致的构建失败
          NEXT_PUBLIC_APP_URL: ${{ env.NEXT_PUBLIC_APP_URL }}

      - name: Build application
        if: steps.preview-secrets.outputs.available == 'true'
        run: pnpm run preview:cf
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          NEXT_PUBLIC_APP_URL: ${{ env.NEXT_PUBLIC_APP_URL }}

      - name: Verify build output
        if: steps.preview-secrets.outputs.available == 'true'
        run: |
          echo "Checking build output..."
          ls -la .open-next/ || echo "No .open-next directory found"
          ls -la .next/ || echo "No .next directory found"
          echo "Build verification complete"

      - name: Run database migrations (Preview)
        if: steps.preview-secrets.outputs.available == 'true'
        uses: cloudflare/wrangler-action@da0e0dfe58b7a431659754fdf3f186c529afbe65
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: preview
          wranglerVersion: '4.42.0'
          command: d1 migrations apply next-cf-app --env preview

      - name: Deploy to Preview (code)
        if: steps.preview-secrets.outputs.available == 'true'
        uses: cloudflare/wrangler-action@da0e0dfe58b7a431659754fdf3f186c529afbe65
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: preview
          command: deploy --env preview --var "CREEM_API_URL=${{ vars.CREEM_API_URL_PREVIEW }}" --var "NEXT_PUBLIC_APP_URL=${{ env.NEXT_PUBLIC_APP_URL }}" --var "TRANSLATION_PROVIDER=${{ vars.TRANSLATION_PROVIDER || 'gpt' }}" --var "OPENAI_BASE_URL=${{ vars.OPENAI_BASE_URL }}"
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}
          CREEM_API_KEY: ${{ secrets.CREEM_API_KEY }}
          CREEM_WEBHOOK_SECRET: ${{ secrets.CREEM_WEBHOOK_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Preview health check
        if: steps.preview-secrets.outputs.available == 'true'
        env:
          HC_SECRET: ${{ secrets.PREVIEW_HEALTHCHECK_URL }}
          HC_VAR: ${{ vars.PREVIEW_HEALTHCHECK_URL }}
        run: |
          url="${HC_SECRET:-${HC_VAR:-${NEXT_PUBLIC_APP_URL%/}/api/health}}"
          if [ -z "$url" ]; then
            echo "No preview health check URL configured. Skipping check."
            exit 0
          fi
          echo "Checking preview health at $url"
          curl -f --retry 3 --retry-delay 5 "$url"

  # Deploy to production
  deploy-production:
    name: Deploy Production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [quality-gate-reusable]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955

      - name: Setup pnpm
        uses: pnpm/action-setup@36de12bed180fa130ed56a35e7344f2fa7a820ab
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Check required secrets (Production)
        run: |
          missing=()
          for var in CLOUDFLARE_API_TOKEN CLOUDFLARE_ACCOUNT_ID BETTER_AUTH_SECRET GOOGLE_CLIENT_ID GOOGLE_CLIENT_SECRET CLOUDFLARE_R2_URL CREEM_API_KEY CREEM_WEBHOOK_SECRET; do
            value="${!var}"
            if [ -z "$value" ]; then
              missing+=("$var")
            fi
          done

          if [ "${#missing[@]}" -eq 0 ]; then
            echo "All required production secrets are present."
            exit 0
          fi

          echo "Production deployment aborted. Missing secrets: ${missing[*]}"
          exit 1
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}
          CREEM_API_KEY: ${{ secrets.CREEM_API_KEY }}
          CREEM_WEBHOOK_SECRET: ${{ secrets.CREEM_WEBHOOK_SECRET }}

      - name: Check NEXT_PUBLIC_APP_URL (Production)
        run: |
          set -euo pipefail
          url="${{ vars.NEXT_PUBLIC_APP_URL }}"
          if [ -z "$url" ]; then
            echo "NEXT_PUBLIC_APP_URL is required for production. Set it in: Settings 鈫?Secrets and variables 鈫?Actions 鈫?Variables."
            exit 1
          fi
          if echo "$url" | grep -Eqi 'localhost|127\.0\.0\.1'; then
            echo "NEXT_PUBLIC_APP_URL must not point to localhost for production: $url"
            exit 1
          fi

      - name: Cache Next.js build
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: Install dependencies (composite)
        uses: ./.github/actions/install-and-heal

      - name: Generate Cloudflare types
        run: pnpm run cf-typegen
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Build Next.js (diagnostic)
        run: pnpm run build
        env:
          NEXT_PUBLIC_APP_URL: ${{ env.NEXT_PUBLIC_APP_URL }}

      - name: Build application
        run: pnpm run build:cf
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          NEXT_PUBLIC_APP_URL: ${{ env.NEXT_PUBLIC_APP_URL }}

      - name: Generate backup filename
        id: backup
        run: |
          timestamp=$(date +%Y%m%d_%H%M%S)
          echo "filename=backup_prod_${timestamp}.sql" >> $GITHUB_OUTPUT

      - name: Backup production database
        uses: cloudflare/wrangler-action@da0e0dfe58b7a431659754fdf3f186c529afbe65
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '4.42.0'
          command: d1 export next-cf-app --output ${{ steps.backup.outputs.filename }}

      - name: Upload production DB backup
        if: steps.backup.outcome == 'success'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: ${{ steps.backup.outputs.filename }}
          path: ${{ steps.backup.outputs.filename }}
          retention-days: 14

      - name: Run database migrations (Production)
        uses: cloudflare/wrangler-action@da0e0dfe58b7a431659754fdf3f186c529afbe65
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: production
          wranglerVersion: '4.42.0'
          command: d1 migrations apply next-cf-app --env production --remote

      - name: Verify D1 migrations applied (list)
        uses: cloudflare/wrangler-action@da0e0dfe58b7a431659754fdf3f186c529afbe65
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: production
          wranglerVersion: '4.42.0'
          command: d1 migrations list next-cf-app --env production --remote

      - name: Verify critical tables exist (site_settings)
        uses: cloudflare/wrangler-action@da0e0dfe58b7a431659754fdf3f186c529afbe65
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: production
          wranglerVersion: '4.42.0'
          command: d1 execute next-cf-app --env production --remote --command "SELECT name FROM sqlite_master WHERE type='table' AND name='site_settings';"

      - name: Deploy to Production (code)
        uses: cloudflare/wrangler-action@da0e0dfe58b7a431659754fdf3f186c529afbe65
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: production
          wranglerVersion: '4.42.0'
          command: deploy --env production --var "CREEM_API_URL=${{ vars.CREEM_API_URL_PRODUCTION }}" --var "NEXT_PUBLIC_APP_URL=${{ env.NEXT_PUBLIC_APP_URL }}" --var "TRANSLATION_PROVIDER=${{ vars.TRANSLATION_PROVIDER || 'gpt' }}" --var "OPENAI_BASE_URL=${{ vars.OPENAI_BASE_URL }}"
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}
          CREEM_API_KEY: ${{ secrets.CREEM_API_KEY }}
          CREEM_WEBHOOK_SECRET: ${{ secrets.CREEM_WEBHOOK_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Sync Production secrets
        if: vars.SYNC_PRODUCTION_SECRETS == 'true'
        run: |
          set -euo pipefail
          sync_secret () {
            local key="$1"
            local value="$2"
            printf '%s' "$value" | pnpm exec wrangler secret put "$key" --env production --name next-cf-app
          }
          sync_secret BETTER_AUTH_SECRET "$BETTER_AUTH_SECRET"
          sync_secret GOOGLE_CLIENT_ID "$GOOGLE_CLIENT_ID"
          sync_secret GOOGLE_CLIENT_SECRET "$GOOGLE_CLIENT_SECRET"
          sync_secret CLOUDFLARE_R2_URL "$CLOUDFLARE_R2_URL"
          sync_secret CREEM_API_KEY "$CREEM_API_KEY"
          sync_secret CREEM_WEBHOOK_SECRET "$CREEM_WEBHOOK_SECRET"
          sync_secret OPENAI_API_KEY "$OPENAI_API_KEY"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}
          CREEM_API_KEY: ${{ secrets.CREEM_API_KEY }}
          CREEM_WEBHOOK_SECRET: ${{ secrets.CREEM_WEBHOOK_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Skip production secret sync (disabled)
        if: vars.SYNC_PRODUCTION_SECRETS != 'true'
        run: echo "Skipping production secret sync (set vars.SYNC_PRODUCTION_SECRETS to 'true' to enable)."

      - name: Wait for deployment
        run: sleep 45

      - name: Production health check
        env:
          HC_SECRET: ${{ secrets.PRODUCTION_HEALTHCHECK_URL }}
          HC_VAR: ${{ vars.PRODUCTION_HEALTHCHECK_URL }}
        run: |
          url="${HC_SECRET:-${HC_VAR:-${NEXT_PUBLIC_APP_URL%/}/api/health?fast=1}}"
          if [ -z "$url" ]; then
            echo "No production health check URL configured. Skipping check."
            exit 0
          fi
          echo "Checking production health at $url"
          curl -fsS --retry 3 --retry-all-errors --retry-delay 5 --connect-timeout 5 --max-time 20 -w "\nHTTP %{http_code}\n" "$url"

      - name: Post-deployment verification
        uses: cloudflare/wrangler-action@da0e0dfe58b7a431659754fdf3f186c529afbe65
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '4.42.0'
          command: --version
