name: Deploy Next.js App to Cloudflare

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Deploy preview for pull requests
  deploy-preview:
    name: Deploy Preview
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Check required secrets
        id: preview-secrets
        run: |
          missing=()
          for var in CF_TOKEN CF_ACCOUNT BETTER_AUTH SECRET_GOOGLE_ID SECRET_GOOGLE_SECRET R2_URL CREEM_API CREEM_WEBHOOK; do
            value="${!var}"
            if [ -z "$value" ]; then
              missing+=("$var")
            fi
          done

          if [ "${#missing[@]}" -eq 0 ]; then
            echo "available=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "available=false" >> "$GITHUB_OUTPUT"
          echo "Preview deployment skipped. Missing secrets: ${missing[*]}"
        env:
          CF_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          BETTER_AUTH: ${{ secrets.BETTER_AUTH_SECRET }}
          SECRET_GOOGLE_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          SECRET_GOOGLE_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}
          CREEM_API: ${{ secrets.CREEM_API_KEY }}
          CREEM_WEBHOOK: ${{ secrets.CREEM_WEBHOOK_SECRET }}

      - name: Cache OpenNext build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .open-next
          key: ${{ runner.os }}-opennext-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-opennext-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Generate Cloudflare types
        if: steps.preview-secrets.outputs.available == 'true'
        run: pnpm run cf-typegen
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Build Next.js (diagnostic)
        run: pnpm run build

      - name: Build application
        if: steps.preview-secrets.outputs.available == 'true'
        run: pnpm run preview:cf
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Verify build output
        if: steps.preview-secrets.outputs.available == 'true'
        run: |
          echo "Checking build output..."
          ls -la .open-next/ || echo "No .open-next directory found"
          ls -la .next/ || echo "No .next directory found"
          echo "Build verification complete"

      - name: Run database migrations (Preview)
        if: steps.preview-secrets.outputs.available == 'true'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: preview
          command: d1 migrations apply next-cf-app --env preview

      - name: Deploy to Preview
        if: steps.preview-secrets.outputs.available == 'true'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: preview
          command: deploy --env preview --var CREEM_API_URL=${{ vars.CREEM_API_URL_PREVIEW }}
          secrets: |
            BETTER_AUTH_SECRET
            GOOGLE_CLIENT_ID
            GOOGLE_CLIENT_SECRET
            CLOUDFLARE_R2_URL
            CREEM_API_KEY
            CREEM_WEBHOOK_SECRET
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}
          CREEM_API_KEY: ${{ secrets.CREEM_API_KEY }}
          CREEM_WEBHOOK_SECRET: ${{ secrets.CREEM_WEBHOOK_SECRET }}

      - name: Comment PR with preview URL
        if: steps.preview-secrets.outputs.available == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Preview deployed! Check it out at: https://next-cf-app-preview.effendi-official.workers.dev'
            })

      - name: Comment PR when preview is skipped
        if: steps.preview-secrets.outputs.available != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ Preview deployment was skipped because required Cloudflare secrets are not available for this pull request.'
            })

  # Deploy to production (main branch)
  deploy-production:
    name: Deploy Production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Generate Cloudflare types
        run: pnpm run cf-typegen
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Build Next.js (diagnostic)
        run: pnpm run build

      - name: Build application
        run: pnpm run build:cf
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Generate backup filename
        id: backup
        run: |
          timestamp=$(date +%Y%m%d_%H%M%S)
          echo "filename=backup_prod_${timestamp}.sql" >> $GITHUB_OUTPUT

      - name: Backup production database
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 export next-cf-app --output ${{ steps.backup.outputs.filename }}

      - name: Run database migrations (Production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: production
          command: d1 migrations apply next-cf-app

      - name: Deploy to Production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          environment: production
          command: deploy --env production --var CREEM_API_URL=${{ vars.CREEM_API_URL_PRODUCTION }}
          secrets: |
            BETTER_AUTH_SECRET
            GOOGLE_CLIENT_ID
            GOOGLE_CLIENT_SECRET
            CLOUDFLARE_R2_URL
            CREEM_API_KEY
            CREEM_WEBHOOK_SECRET
        env:
          BETTER_AUTH_SECRET: ${{ secrets.BETTER_AUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLOUDFLARE_R2_URL: ${{ secrets.CLOUDFLARE_R2_URL }}
          CREEM_API_KEY: ${{ secrets.CREEM_API_KEY }}
          CREEM_WEBHOOK_SECRET: ${{ secrets.CREEM_WEBHOOK_SECRET }}

      - name: Wait for deployment
        run: sleep 10

      - name: Post-deployment verification
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: --version


  # Cleanup job
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-preview]
    if: always()
    steps:
      - name: Cleanup artifacts
        run: echo "Cleaning up temporary files and caches..."

