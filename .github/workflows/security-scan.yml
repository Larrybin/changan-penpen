name: Security Scan

on:
  workflow_dispatch:
  schedule:
    # Run weekly on Mondays at 8 AM UTC
    - cron: '0 8 * * 1'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  comprehensive-security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      CODEQL_EXTRACTOR_JAVASCRIPT_NODE_MODULES_INCLUSION: none
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 2

      - name: Determine CodeQL upload mode
        id: fork-check
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.head.repo.fork }}" == "true" ]]; then
            echo "⚠️ Detected forked pull request - CodeQL results will be stored as artifacts only"
            echo "is-fork=true" >> "$GITHUB_OUTPUT"
            echo "can-upload=false" >> "$GITHUB_OUTPUT"
          else
            echo "is-fork=false" >> "$GITHUB_OUTPUT"
            echo "can-upload=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: 20
          pnpm-version: 8.15.9
          cache-key-suffix: "-security"

      - name: SAST Analysis with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: .github/codeql/codeql-config.yml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build CodeQL Database
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        if: steps.fork-check.outputs.can-upload == 'true'
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-results

      - name: Generate SARIF artifact without upload
        if: steps.fork-check.outputs.can-upload != 'true'
        run: |
          set -euo pipefail

          mkdir -p codeql-results
          CODEQL_SUITE="codeql_databases/javascript/temp/config-queries.qls"

          if [[ ! -f "${CODEQL_SUITE}" ]]; then
            echo "::error::Unable to locate generated CodeQL query suite at ${CODEQL_SUITE}" >&2
            exit 1
          fi

          codeql database analyze \
            --format=sarifv2.1.0 \
            --output=codeql-results/javascript.sarif \
            --threads=0 \
            codeql_databases/javascript \
            "${CODEQL_SUITE}"

      - name: Upload CodeQL SARIF as artifact
        if: steps.fork-check.outputs.can-upload != 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: codeql-results-${{ github.run_id }}
          path: codeql-results

      - name: Dependency Security Scan
        run: |
          set -euo pipefail
          echo "::group::Comprehensive Dependency Security Scan"

          # Use npm audit as backup for pnpm audit
          echo "🔍 Running pnpm audit..."
          if pnpm audit --audit-level high --json > audit-results.json 2>/dev/null; then
            echo "✅ No high/critical vulnerabilities found"
          else
            echo "::warning::Security vulnerabilities detected"
            jq '.metadata.vulnerabilities' audit-results.json | jq -r 'to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | "\(.value.module_name)@\(.value.version): \(.value.title)"'
          fi

          echo "::endgroup::"

      - name: Container Security Scan
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          echo "::group::Container Security Analysis"

          # Create a simple Dockerfile for scanning if not exists
          if [[ ! -f "Dockerfile" ]]; then
            cat > Dockerfile << 'EOF'
          FROM node:20-alpine AS builder
          WORKDIR /app
          COPY package*.json ./
          RUN npm install --production
          COPY . .
          RUN npm run build

          FROM node:20-alpine AS runner
          WORKDIR /app
          COPY --from=builder /app/dist ./dist
          COPY --from=builder /app/node_modules ./node_modules
          COPY --from=builder /app/package.json ./package.json
          EXPOSE 3000
          CMD ["node", "dist/main.js"]
          EOF
          fi

          echo "::endgroup::"

      - name: Code Quality Security Check
        run: |
          set -euo pipefail
          echo "::group::Code Quality Security Analysis"

          # Check for common security issues in source code
          issues_found=false

          # Check for hardcoded secrets patterns
          if grep -r -i -E "(password|secret|key|token)\s*=\s*[\"']?[^\"'\s]+" src/ --include="*.{js,ts,jsx,tsx}" --exclude-dir=node_modules 2>/dev/null; then
            echo "::warning::Potential hardcoded secrets found in source code"
            issues_found=true
          fi

          # Check for insecure HTTP usage
          if grep -r "http://" src/ --include="*.{js,ts,jsx,tsx}" --exclude-dir=node_modules --exclude-dir=".next" 2>/dev/null; then
            echo "::warning::Insecure HTTP usage detected"
            issues_found=true
          fi

          # Check for console.log in production code
          console_logs=$(grep -r "console\." src/ --include="*.{js,ts,jsx,tsx}" --exclude-dir=node_modules --exclude-dir=".next" | wc -l 2>/dev/null || echo "0")
          if [[ $console_logs -gt 10 ]]; then
            echo "::warning::High number of console.log statements found: $console_logs"
            issues_found=true
          fi

          if [[ "$issues_found" == "true" ]]; then
            echo "::warning::Security quality issues found. Review above warnings."
          else
            echo "✅ Code quality security checks passed"
          fi

          echo "::endgroup::"

      - name: Generate Security Report
        if: always()
        run: |
          cat > security-report.md << 'EOF'
          # Security Scan Report

          ## Summary
          - **Scan Type**: Comprehensive Security Analysis
          - **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Repository**: ${{ github.repository }}
          - **Commit**: ${{ github.sha }}

          ## Scans Performed
          1. **Static Application Security Testing (SAST)** - CodeQL Analysis
          2. **Dependency Security Scan** - Vulnerability Detection
          3. **Code Quality Analysis** - Security Patterns
          4. **Container Security** - Image Scanning (if applicable)

          ## Recommendations
          - Review and fix any high/critical vulnerabilities
          - Remove hardcoded secrets and credentials
          - Use HTTPS for all external communications
          - Remove debug console.log statements from production code
          - Keep dependencies updated regularly
          - Implement proper security headers

          ---
          *This report is generated automatically by GitHub Actions*
          EOF

          echo "::group::Security Report"
          cat security-report.md
          echo "::endgroup::"

          # Upload as artifact
          mkdir -p reports
          cp security-report.md reports/
          if [[ -f "audit-results.json" ]]; then
            cp audit-results.json reports/
          fi

      - name: Upload Security Report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()
        with:
          name: security-report-${{ github.run_number }}
          path: reports/
          retention-days: 30

      - name: PR Security Comment
        if: github.event_name == 'pull_request' && (failure() || contains(github.event.pull_request.body, 'security') || contains(github.event.pull_request.title, 'security'))
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        with:
          script: |
            const fs = require('fs');
            const isFork = Boolean(context.payload.pull_request?.head?.repo?.fork);

            let comment = '## 🔒 Security Scan Results\n\n';

            if (isFork) {
              comment += '⚠️ 由于该 PR 来自 fork，CodeQL 结果已作为构件上传，请在 Actions 运行页面下载 `codeql-results` 工件查看详细 SARIF 报告。\n\n';
            }

            // Check if any security steps failed
            if ('${{ job.status }}' === 'failure') {
              comment += '❌ **Security issues detected**\n\n';
              comment += 'Please review the security scan output and fix the identified issues before merging.\n\n';
              comment += '### 🚨 Action Required:\n';
              comment += '- Review all high/critical vulnerabilities\n';
              comment += '- Remove hardcoded secrets\n';
              comment += '- Fix security warnings\n';
              comment += '- Re-run security checks after fixes\n\n';
              comment += '📋 [View detailed security report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            } else {
              comment += '✅ **Security scan completed without critical issues**\n\n';
              comment += 'No high/critical security vulnerabilities were detected.\n\n';
              comment += '### 📝 Recommendations:\n';
              comment += '- Continue following security best practices\n';
              comment += '- Keep dependencies updated\n';
              comment += '- Review code changes for security implications\n';
            }

            comment += '\n---\n*This comment is automatically generated on security scans*';

            // Create or update comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('Security Scan Results') &&
              comment.user.type === 'Bot'
            );

            try {
              if (existingComment) {
                await github.rest.issues.updateComment({
                  comment_id: existingComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment,
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment,
                });
              }
            } catch (error) {
              core.warning(`Unable to publish security scan comment: ${error.message}`);
            }

            // Completed security scan comment handling

