name: Auto Fix (deterministic + AI)

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["CI", "Deploy Next.js App to Cloudflare"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  actions: read

concurrency:
  group: autofix-${{ github.ref }}
  cancel-in-progress: true

env:
  SUMMARY_FILE: auto-fix-summary.md
  RUN_URL: ${{ github.event.workflow_run.html_url }}
  RUN_ID: ${{ github.event.workflow_run.id }}
  RUN_NAME: ${{ github.event.workflow_run.name }}
  RUN_NUMBER: ${{ github.event.workflow_run.run_number }}
  HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
  BASE_BRANCH: ${{ github.event.workflow_run.head_branch || github.event.repository.default_branch }}

jobs:
  auto-fix:
    if: ${{ github.event.workflow_run.conclusion != 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 0
          ref: ${{ github.event.workflow_run.head_branch || github.event.repository.default_branch }}

      - name: Prepare summary
        run: |
          {
            echo "## Auto-fix Summary";
            echo "- Source workflow: ${RUN_NAME} (run #${RUN_NUMBER})";
            echo "- Run URL: ${RUN_URL}";
            echo "- Head SHA: ${HEAD_SHA}";
            echo "";
          } > "$SUMMARY_FILE"

      - name: Setup pnpm
        uses: pnpm/action-setup@36de12bed180fa130ed56a35e7344f2fa7a820ab
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install deps with self-healing
        id: deps
        run: |
          set -euo pipefail
          LOG=$(mktemp)
          echo "### Dependency install" >> "$SUMMARY_FILE"
          if pnpm install --frozen-lockfile 2>&1 | tee "$LOG"; then
            echo "lock_updated=false" >> "$GITHUB_OUTPUT"
            echo "install_status=success" >> "$GITHUB_OUTPUT"
            tail -n 25 "$LOG" >> "$SUMMARY_FILE"
          else
            tail -n 80 "$LOG" >> "$SUMMARY_FILE"
            if grep -E 'ERR_PNPM_OUTDATED_LOCKFILE|ERR_PNPM_LOCKFILE_BREAKING_CHANGE' "$LOG"; then
              echo "Detected outdated lockfile, re-running without --frozen." | tee -a "$SUMMARY_FILE"
              pnpm install --no-frozen-lockfile 2>&1 | tee -a "$SUMMARY_FILE"
              echo "lock_updated=true" >> "$GITHUB_OUTPUT"
              echo "install_status=lockfile_updated" >> "$GITHUB_OUTPUT"
            elif grep -E 'ERESOLVE|UND_ERR_CONNECT|ETIMEDOUT' "$LOG"; then
              echo "Detected dependency resolution/network issue, running pnpm dedupe + reinstall." | tee -a "$SUMMARY_FILE"
              pnpm dedupe 2>&1 | tee -a "$SUMMARY_FILE" || true
              pnpm install --no-frozen-lockfile 2>&1 | tee -a "$SUMMARY_FILE"
              echo "lock_updated=true" >> "$GITHUB_OUTPUT"
              echo "install_status=dedupe" >> "$GITHUB_OUTPUT"
              echo "dedupe_ran=true" >> "$GITHUB_OUTPUT"
            else
              echo "::error::pnpm install failed. See summary for details." >&2
              exit 1
            fi
          fi

      - name: Run biome format
        id: format
        run: |
          set -euo pipefail
          LOG=$(mktemp)
          if pnpm exec biome format --write . > "$LOG" 2>&1; then
            echo "biome_format=success" >> "$GITHUB_OUTPUT"
          else
            echo "biome_format=failed" >> "$GITHUB_OUTPUT"
          fi
          echo "### biome format --write" >> "$SUMMARY_FILE"
          tail -n 40 "$LOG" >> "$SUMMARY_FILE"

      - name: Run biome check --write
        id: biome_check
        run: |
          set -euo pipefail
          LOG=$(mktemp)
          if pnpm exec biome check . --write > "$LOG" 2>&1; then
            echo "biome_check=success" >> "$GITHUB_OUTPUT"
          else
            echo "biome_check=failed" >> "$GITHUB_OUTPUT"
          fi
          echo "### biome check --write" >> "$SUMMARY_FILE"
          tail -n 40 "$LOG" >> "$SUMMARY_FILE"

      - name: Type check (tsc)
        id: tsc
        continue-on-error: true
        run: |
          set -euo pipefail
          LOG=$(mktemp)
          if pnpm exec tsc --noEmit > "$LOG" 2>&1; then
            STATUS=success
          else
            STATUS=failed
          fi
          echo "tsc=${STATUS}" >> "$GITHUB_OUTPUT"
          echo "### tsc --noEmit" >> "$SUMMARY_FILE"
          tail -n 60 "$LOG" >> "$SUMMARY_FILE"

      - name: Detect changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            git status --short
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit deterministic fixes (if any)
        if: steps.changes.outputs.changed == 'true'
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "${BASE_BRANCH}" --depth=1 || true
          git checkout -B "${BASE_BRANCH}" "origin/${BASE_BRANCH}" || git checkout "${BASE_BRANCH}"
          git add -A
          git commit -m "chore(auto-fix): automated fixes after failed run ${RUN_ID}"

      - name: Ensure working tree on base branch
        run: |
          set -euo pipefail
          git fetch origin "${BASE_BRANCH}" --depth=1 || true
          git checkout -B "${BASE_BRANCH}" "origin/${BASE_BRANCH}" || git checkout "${BASE_BRANCH}"

      - name: Create/Update PR (deterministic)
        if: steps.changes.outputs.changed == 'true'
        id: cppr
        uses: peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c
        with:
          base: ${{ env.BASE_BRANCH }}
          branch: autofix/stable
          title: "chore(auto-fix): automated fixes (rolling PR)"
          commit-message: "chore(auto-fix): automated fixes after failed run #${{ env.RUN_ID }}"
          body-path: ${{ env.SUMMARY_FILE }}
          labels: autofix,ci
          delete-branch: false

      - name: Label and enable auto-merge if whitelist-only
        if: steps.cppr.outputs.pull-request-number != ''
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b
        continue-on-error: true
        env:
          PR_NUMBER: ${{ steps.cppr.outputs.pull-request-number }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = Number(process.env.PR_NUMBER);
            const { data: files } = await github.rest.pulls.listFiles({ owner, repo, pull_number: prNumber, per_page: 100 });
            const whitelist = new Set(['pnpm-lock.yaml', 'auto-fix-summary.md']);
            const extra = files.filter(f => !whitelist.has(f.filename));
            if (extra.length === 0) {
              await github.rest.issues.addLabels({ owner, repo, issue_number: prNumber, labels: ['auto-merge'] });
              const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
              const nodeId = pr.node_id;
              try {
                await github.graphql('mutation($pullRequestId: ID!) { enablePullRequestAutoMerge(input: { pullRequestId: $pullRequestId, mergeMethod: SQUASH }) { clientMutationId } }', { pullRequestId: nodeId });
                core.info('Auto-merge enabled for PR #' + prNumber);
              } catch (e) {
                core.warning('Failed to enable auto-merge: ' + (e.message || e));
              }
            } else {
              core.info('Skip auto-merge, non-whitelist files changed: ' + extra.map(x=>x.filename).join(', '));
            }

      - name: Upload summary (artifact)
        if: steps.changes.outputs.changed == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: auto-fix-summary-${{ env.RUN_ID }}
          path: ${{ env.SUMMARY_FILE }}

      - name: Download failing workflow logs (for AI)
        run: |
          mkdir -p logs
          gh run download ${{ github.event.workflow_run.id }} --repo ${{ github.repository }} --dir logs || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run AI auto fix
        id: ai_fix
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          WORKFLOW_RUN_ID: ${{ github.event.workflow_run.id }}
          WORKFLOW_HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          if [ -n "${OPENAI_API_KEY}" ]; then
            node scripts/ai-auto-fix.mjs
          else
            echo "AI auto-fix skipped: OPENAI_API_KEY not set"
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit AI changes
        if: ${{ steps.ai_fix.outputs.changed == 'true' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "${BASE_BRANCH}" --depth=1 || true
          git checkout -B "${BASE_BRANCH}" "origin/${BASE_BRANCH}" || git checkout "${BASE_BRANCH}"
          git add -A
          git commit -m "fix(ai): auto-generated patch after failed run ${RUN_ID}"

      - name: Create/Update PR with AI changes (draft)
        if: ${{ steps.ai_fix.outputs.changed == 'true' }}
        uses: peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c
        with:
          base: ${{ env.BASE_BRANCH }}
          branch: autofix/stable
          title: "fix(ai): auto-generated fixes (rolling PR)"
          commit-message: "fix(ai): auto-generated patch after failed run #${{ env.RUN_ID }}"
          body-path: ${{ steps.ai_fix.outputs.summary_path }}
          labels: ai-autofix,ci,ai-generated
          draft: true
          delete-branch: false


