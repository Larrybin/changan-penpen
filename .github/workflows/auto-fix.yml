name: Auto Fix on Failure

on:
  workflow_run:
    workflows: ["CI", "Deploy Next.js App to Cloudflare"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  actions: read

env:
  SUMMARY_FILE: auto-fix-summary.md
  RUN_URL: ${{ github.event.workflow_run.html_url }}
  RUN_ID: ${{ github.event.workflow_run.id }}
  RUN_NAME: ${{ github.event.workflow_run.name }}
  RUN_NUMBER: ${{ github.event.workflow_run.run_number }}
  HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
  BASE_BRANCH: ${{ github.event.workflow_run.head_branch || github.event.repository.default_branch }}

jobs:
  auto-fix:
    name: Attempt Auto Fixes
    if: ${{ github.event.workflow_run.conclusion != 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare summary
        run: |
          {
            echo "## Auto-fix Summary";
            echo "- Source workflow: ${RUN_NAME} (run #${RUN_NUMBER})";
            echo "- Run URL: ${RUN_URL}";
            echo "- Head SHA: ${HEAD_SHA}";
            echo "";
          } > "$SUMMARY_FILE"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install deps with self-healing
        id: deps
        run: |
          set -euo pipefail
          LOG=$(mktemp)
          echo "### Dependency install" >> "$SUMMARY_FILE"
          if pnpm install --frozen-lockfile 2>&1 | tee "$LOG"; then
            echo "lock_updated=false" >> "$GITHUB_OUTPUT"
            echo "install_status=success" >> "$GITHUB_OUTPUT"
            tail -n 25 "$LOG" >> "$SUMMARY_FILE"
          else
            tail -n 80 "$LOG" >> "$SUMMARY_FILE"
            if grep -E 'ERR_PNPM_OUTDATED_LOCKFILE|ERR_PNPM_LOCKFILE_BREAKING_CHANGE' "$LOG"; then
              echo "Detected outdated lockfile, re-running without --frozen." | tee -a "$SUMMARY_FILE"
              pnpm install --no-frozen-lockfile 2>&1 | tee -a "$SUMMARY_FILE"
              echo "lock_updated=true" >> "$GITHUB_OUTPUT"
              echo "install_status=lockfile_updated" >> "$GITHUB_OUTPUT"
            elif grep -E 'ERESOLVE|UND_ERR_CONNECT|ETIMEDOUT' "$LOG"; then
              echo "Detected dependency resolution/network issue, running pnpm dedupe + reinstall." | tee -a "$SUMMARY_FILE"
              pnpm dedupe 2>&1 | tee -a "$SUMMARY_FILE" || true
              pnpm install --no-frozen-lockfile 2>&1 | tee -a "$SUMMARY_FILE"
              echo "lock_updated=true" >> "$GITHUB_OUTPUT"
              echo "install_status=dedupe" >> "$GITHUB_OUTPUT"
              echo "dedupe_ran=true" >> "$GITHUB_OUTPUT"
            else
              echo "::error::pnpm install failed. See summary for details." >&2
              exit 1
            fi
          fi

      - name: Run biome format
        id: format
        run: |
          set -euo pipefail
          LOG=$(mktemp)
          if pnpm exec biome format --write . > "$LOG" 2>&1; then
            echo "biome_format=success" >> "$GITHUB_OUTPUT"
          else
            echo "biome_format=failed" >> "$GITHUB_OUTPUT"
          fi
          echo "### biome format --write" >> "$SUMMARY_FILE"
          tail -n 40 "$LOG" >> "$SUMMARY_FILE"

      - name: Run biome check --write
        id: biome_check
        run: |
          set -euo pipefail
          LOG=$(mktemp)
          if pnpm exec biome check . --write > "$LOG" 2>&1; then
            echo "biome_check=success" >> "$GITHUB_OUTPUT"
          else
            echo "biome_check=failed" >> "$GITHUB_OUTPUT"
          fi
          echo "### biome check --write" >> "$SUMMARY_FILE"
          tail -n 40 "$LOG" >> "$SUMMARY_FILE"

      - name: Run next lint --fix
        id: next_lint
        continue-on-error: true
        run: |
          set -euo pipefail
          LOG=$(mktemp)
          if pnpm exec next lint --fix --max-warnings=0 > "$LOG" 2>&1; then
            STATUS=success
          else
            STATUS=failed
          fi
          echo "next_lint=${STATUS}" >> "$GITHUB_OUTPUT"
          echo "### next lint --fix" >> "$SUMMARY_FILE"
          tail -n 40 "$LOG" >> "$SUMMARY_FILE"

      - name: Type check (tsc)
        id: tsc
        continue-on-error: true
        run: |
          set -euo pipefail
          LOG=$(mktemp)
          if pnpm exec tsc --noEmit > "$LOG" 2>&1; then
            STATUS=success
          else
            STATUS=failed
          fi
          echo "tsc=${STATUS}" >> "$GITHUB_OUTPUT"
          echo "### tsc --noEmit" >> "$SUMMARY_FILE"
          tail -n 60 "$LOG" >> "$SUMMARY_FILE"

      - name: Detect changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            git status --short
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit changes (if any)
        if: steps.changes.outputs.changed == 'true'
        id: commit
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # 确保在基准分支上提交，由 create-pull-request 负责创建 PR 分支
          git fetch origin "${BASE_BRANCH}" --depth=1 || true
          git checkout -B "${BASE_BRANCH}" "origin/${BASE_BRANCH}" || git checkout "${BASE_BRANCH}"
          git add -A
          git commit -m "chore(auto-fix): automated fixes after failed run ${RUN_ID}"

      - name: Append command status table
        if: steps.changes.outputs.changed == 'true'
        run: |
          {
            echo "";
            echo "### Command status";
            echo "| Command | Result |";
            echo "| --- | --- |";
            echo "| pnpm install | ${{ steps.deps.outputs.install_status || 'success' }} |";
            echo "| pnpm dedupe | ${{ steps.deps.outputs.dedupe_ran || 'not-run' }} |";
            echo "| biome format --write | ${{ steps.format.outputs.biome_format || 'success' }} |";
            echo "| biome check --write | ${{ steps.biome_check.outputs.biome_check || 'success' }} |";
            echo "| next lint --fix | ${{ steps.next_lint.outputs.next_lint || 'skipped' }} |";
            echo "| tsc --noEmit | ${{ steps.tsc.outputs.tsc || 'skipped' }} |";
          } >> "$SUMMARY_FILE"

      - name: Ensure working tree on base branch
        # 无条件执行，避免 HEAD 停留在将要创建的 PR 分支导致 reset 远端失败
        run: |
          set -euo pipefail
          git fetch origin "${BASE_BRANCH}" --depth=1 || true
          git checkout -B "${BASE_BRANCH}" "origin/${BASE_BRANCH}" || git checkout "${BASE_BRANCH}"

      - name: Create pull request
        if: steps.changes.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          base: ${{ env.BASE_BRANCH }}
          branch: autofix/${{ env.RUN_ID }}
          title: "chore(auto-fix): apply automated fixes after failed run #${{ env.RUN_ID }}"
          commit-message: "chore(auto-fix): automated fixes after failed run #${{ env.RUN_ID }}"
          body-path: ${{ env.SUMMARY_FILE }}
          labels: autofix,ci
          delete-branch: true

      - name: Upload summary (artifact)
        if: steps.changes.outputs.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: auto-fix-summary-${{ env.RUN_ID }}
          path: ${{ env.SUMMARY_FILE }}


