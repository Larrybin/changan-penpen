name: Notify on CI/CD Failure

on:
  workflow_run:
    workflows: ["CI", "Deploy Next.js App to Cloudflare"]
    types: [completed]

permissions:
  actions: read
  contents: read
  issues: write
  pull-requests: write

jobs:
  notify:
    if: ${{ github.event.workflow_run.conclusion != 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Summarize failing jobs and steps
        id: build_summary
        uses: actions/github-script@v7
        with:
          script: |
            const run = context.payload.workflow_run;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner,
              repo,
              run_id: run.id,
              per_page: 100,
            });

            const failedJobs = (jobs.jobs || []).filter(j => j.conclusion && j.conclusion !== 'success');

            let body = `❌ Workflow "${run.name}" #${run.run_number} failed\n` +
              `Run: ${run.html_url}\n` +
              `Event: ${run.event}\n` +
              `Commit: ${run.head_commit?.id?.slice(0,7) || 'n/a'} — ${run.head_commit?.message || ''}` +
              `\n\n`;

            for (const j of failedJobs) {
              body += `• Job: ${j.name} — conclusion: ${j.conclusion}\n  Logs: ${j.html_url}\n`;
              const failedSteps = (j.steps || []).filter(s => s.conclusion === 'failure');
              if (failedSteps.length) {
                body += `  Failed steps:\n`;
                for (const s of failedSteps) body += `    - ${s.name}\n`;
              }
            }

            core.setOutput('body', body);

      - name: Comment on PR (if available)
        if: ${{ github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0] }}
        uses: actions/github-script@v7
        env:
          BODY: ${{ steps.build_summary.outputs.body }}
        with:
          script: |
            const run = context.payload.workflow_run;
            const pr = run.pull_requests[0];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: process.env.BODY,
            });

      - name: Open/append tracking issue (for pushes)
        if: ${{ !github.event.workflow_run.pull_requests || github.event.workflow_run.pull_requests.length == 0 }}
        uses: actions/github-script@v7
        env:
          BODY: ${{ steps.build_summary.outputs.body }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const title = 'CI/CD Failure Tracker';
            // Find existing open issue
            const { data: issues } = await github.rest.issues.listForRepo({ owner, repo, state: 'open', labels: 'ci-failure' });
            const existing = issues.find(i => i.title === title);
            if (existing) {
              await github.rest.issues.createComment({ owner, repo, issue_number: existing.number, body: process.env.BODY });
            } else {
              await github.rest.issues.create({ owner, repo, title, body: process.env.BODY, labels: ['ci-failure'] });
            }

