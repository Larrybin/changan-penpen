/**
 * ButtonÁªÑ‰ª∂ÊµãËØï
 * Âü∫‰∫éReact Testing LibraryÊúÄ‰Ω≥ÂÆûË∑µ
 * ÊµãËØïÈ°πÁõÆÁúüÂÆûButtonÁªÑ‰ª∂ÁöÑÂêÑÁßçÁä∂ÊÄÅÂíå‰∫§‰∫í
 */

import { describe, it, expect, beforeEach, vi } from "vitest";
import { customRender, setupUserEvent, getByRole, expectElementToBeAccessible } from "../setup";
import { Button } from "@/components/ui/button";

describe("ButtonÁªÑ‰ª∂", () => {
    let user: ReturnType<typeof setupUserEvent>;

    beforeEach(() => {
        user = setupUserEvent();
    });

    describe("Âü∫Á°ÄÊ∏≤ÊüìÊµãËØï", () => {
        it("Â∫îËØ•Ê≠£Á°ÆÊ∏≤ÊüìÊåâÈíÆÊñáÊú¨", () => {
            customRender(<MockButton>Click me</MockButton>);

            const button = getByRole("button", { name: /click me/i });
            expect(button).toBeInTheDocument();
            expectElementToBeAccessible(button);
        });

        it("Â∫îËØ•ÊúâÊ≠£Á°ÆÁöÑroleÂ±ûÊÄß", () => {
            customRender(<MockButton>Submit</MockButton>);

            const button = getByRole("button");
            expect(button).toBeInTheDocument();
        });

        it("Â∫îËØ•ÊîØÊåÅËá™ÂÆö‰πâdata-slotÂ±ûÊÄß", () => {
            customRender(<Button>Test Button</Button>);

            const button = document.querySelector('[data-slot="button"]');
            expect(button).toBeInTheDocument();
        });
    });

    describe("Áä∂ÊÄÅÊµãËØï", () => {
        it("Â∫îËØ•Âú®Á¶ÅÁî®Áä∂ÊÄÅ‰∏ã‰∏çÂèØÁÇπÂáª", () => {
            const mockClick = vi.fn();
            customRender(
                <MockButton disabled onClick={mockClick}>
                    Disabled Button
                </MockButton>
            );

            const button = getByRole("button", { name: /disabled button/i });
            expect(button).toBeDisabled();

            // Â∞ùËØïÁÇπÂáª
            user.click(button);
            expect(mockClick).not.toHaveBeenCalled();
        });

        it("Â∫îËØ•Âú®Á¶ÅÁî®Áä∂ÊÄÅ‰∏ãÊ≠£Á°ÆÊ∏≤Êüì", () => {
            customRender(<Button disabled>Disabled Button</Button>);

            const button = getByRole("button", { name: /disabled button/i });
            expect(button).toBeDisabled();
            expect(button).toHaveClass("disabled:opacity-50");
        });
    });

    describe("‰∫§‰∫íÊµãËØï", () => {
        it("Â∫îËØ•Âú®ÁÇπÂáªÊó∂Ë∞ÉÁî®onClickÂ§ÑÁêÜÂáΩÊï∞", async () => {
            const mockClick = vi.fn();
            customRender(
                <MockButton onClick={mockClick}>
                    Clickable Button
                </MockButton>
            );

            const button = getByRole("button", { name: /clickable button/i });
            await user.click(button);

            expect(mockClick).toHaveBeenCalledTimes(1);
        });

        it("Â∫îËØ•ÊîØÊåÅÈîÆÁõò‰∫§‰∫í", async () => {
            const mockClick = vi.fn();
            customRender(
                <MockButton onClick={mockClick}>
                    Keyboard Button
                </MockButton>
            );

            const button = getByRole("button", { name: /keyboard button/i });
            button.focus();
            await user.keyboard("{Enter}");

            expect(mockClick).toHaveBeenCalledTimes(1);
        });

        it("Â∫îËØ•ÊîØÊåÅÁ©∫Ê†ºÈîÆ‰∫§‰∫í", async () => {
            const mockClick = vi.fn();
            customRender(
                <MockButton onClick={mockClick}>
                    Space Button
                </MockButton>
            );

            const button = getByRole("button", { name: /space button/i });
            button.focus();
            await user.keyboard(" ");

            expect(mockClick).toHaveBeenCalledTimes(1);
        });
    });

    describe("ÂèØËÆøÈóÆÊÄßÊµãËØï", () => {
        it("Â∫îËØ•ÊúâÈÄÇÂΩìÁöÑARIAÂ±ûÊÄß", () => {
            customRender(<MockButton loading>Accessible Button</MockButton>);

            const button = getByRole("button", { name: /loading/i });
            expect(button).toHaveAttribute("aria-busy", "true");
        });

        it("Â∫îËØ•Âú®Á¶ÅÁî®Áä∂ÊÄÅÊó∂ÊúâÈÄÇÂΩìÁöÑARIAÂ±ûÊÄß", () => {
            customRender(<MockButton disabled>Disabled Button</MockButton>);

            const button = getByRole("button", { name: /disabled button/i });
            expect(button).toBeDisabled();
        });

        it("Â∫îËØ•ÊîØÊåÅfocusÁÆ°ÁêÜ", () => {
            customRender(<MockButton>Focus Button</MockButton>);

            const button = getByRole("button", { name: /focus button/i });
            button.focus();
            expect(button).toHaveFocus();
        });
    });

    describe("Âèò‰ΩìÊµãËØï", () => {
        it("Â∫îËØ•Ê∏≤Êüì‰∏çÂêåÂèò‰ΩìÁöÑÊåâÈíÆ", () => {
            const { rerender } = customRender(<Button variant="default">Default</Button>);

            let button = getByRole("button", { name: /default/i });
            expect(button).toHaveClass("bg-[var(--button-bg)]");

            rerender(<Button variant="destructive">Destructive</Button>);
            button = getByRole("button", { name: /destructive/i });
            expect(button).toHaveClass("bg-destructive");

            rerender(<Button variant="outline">Outline</Button>);
            button = getByRole("button", { name: /outline/i });
            expect(button).toHaveClass("border");

            rerender(<Button variant="secondary">Secondary</Button>);
            button = getByRole("button", { name: /secondary/i });
            expect(button).toHaveClass("bg-secondary");

            rerender(<Button variant="ghost">Ghost</Button>);
            button = getByRole("button", { name: /ghost/i });
            expect(button).toHaveClass("hover:bg-accent");

            rerender(<Button variant="link">Link</Button>);
            button = getByRole("button", { name: /link/i });
            expect(button).toHaveClass("text-primary", "underline-offset-4");
        });

        it("Â∫îËØ•Ê∏≤Êüì‰∏çÂêåÂ∞∫ÂØ∏ÁöÑÊåâÈíÆ", () => {
            const { rerender } = customRender(<Button size="default">Default</Button>);

            let button = getByRole("button", { name: /default/i });
            expect(button).toHaveClass("h-9");

            rerender(<Button size="sm">Small</Button>);
            button = getByRole("button", { name: /small/i });
            expect(button).toHaveClass("h-8");

            rerender(<Button size="lg">Large</Button>);
            button = getByRole("button", { name: /large/i });
            expect(button).toHaveClass("h-10");

            rerender(<Button size="icon">Icon</Button>);
            button = getByRole("button", { name: /icon/i });
            expect(button).toHaveClass("size-9");
        });
    });

    describe("Â≠êÁªÑ‰ª∂ÊµãËØï", () => {
        it("Â∫îËØ•ÊîØÊåÅÂõæÊ†áÂ≠êÁªÑ‰ª∂", () => {
            customRender(
                <MockButton>
                    <span data-testid="icon">üî•</span>
                    Button with Icon
                </MockButton>
            );

            const icon = document.querySelector('[data-testid="icon"]');
            expect(icon).toBeInTheDocument();

            const button = getByRole("button", { name: /button with icon/i });
            expect(button).toBeInTheDocument();
        });

        it("Â∫îËØ•ÊîØÊåÅÂ§çÊùÇÂ≠êÁªÑ‰ª∂ÁªìÊûÑ", () => {
            customRender(
                <MockButton>
                    <div className="flex items-center gap-2">
                        <span data-testid="left-icon">‚Üí</span>
                        <span>Complex Button</span>
                        <span data-testid="right-icon">‚Üê</span>
                    </div>
                </MockButton>
            );

            const leftIcon = document.querySelector('[data-testid="left-icon"]');
            const rightIcon = document.querySelector('[data-testid="right-icon"]');

            expect(leftIcon).toBeInTheDocument();
            expect(rightIcon).toBeInTheDocument();

            const button = getByRole("button", { name: /complex button/i });
            expect(button).toBeInTheDocument();
        });
    });

    describe("‰∫ã‰ª∂Â§ÑÁêÜÊµãËØï", () => {
        it("Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÈº†Ê†á‰∫ã‰ª∂", async () => {
            const mockMouseEnter = vi.fn();
            const mockMouseLeave = vi.fn();

            customRender(
                <MockButton
                    onMouseEnter={mockMouseEnter}
                    onMouseLeave={mockMouseLeave}
                >
                    Hover Button
                </MockButton>
            );

            const button = getByRole("button", { name: /hover button/i });

            await user.hover(button);
            expect(mockMouseEnter).toHaveBeenCalledTimes(1);

            await user.unhover(button);
            expect(mockMouseLeave).toHaveBeenCalledTimes(1);
        });

        it("Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÁÑ¶ÁÇπ‰∫ã‰ª∂", async () => {
            const mockFocus = vi.fn();
            const mockBlur = vi.fn();

            customRender(
                <MockButton
                    onFocus={mockFocus}
                    onBlur={mockBlur}
                >
                    Focus Button
                </MockButton>
            );

            const button = getByRole("button", { name: /focus button/i });

            button.focus();
            expect(mockFocus).toHaveBeenCalledTimes(1);

            button.blur();
            expect(mockBlur).toHaveBeenCalledTimes(1);
        });
    });
});