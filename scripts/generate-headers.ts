import { writeFileSync } from "node:fs";
import path from "node:path";

import { resolveConfigSync } from "../src/config";
import type { StaticAssetCacheHeadersConfig } from "../src/config/types";

const OUTPUT_PATH = path.join(process.cwd(), "public", "_headers");
const DEFAULT_MAX_AGE_SECONDS = 31536000; // 365 days

function parseDurationToSeconds(value: unknown): number | undefined {
    if (typeof value === "number" && Number.isFinite(value)) {
        return Math.max(0, Math.floor(value));
    }

    if (typeof value === "string") {
        const trimmed = value.trim();
        if (!trimmed) {
            return undefined;
        }

        if (/^\d+$/.test(trimmed)) {
            const parsed = Number.parseInt(trimmed, 10);
            return Number.isFinite(parsed) ? parsed : undefined;
        }

        const match = trimmed.match(/^(\d+)([smhdwy])$/i);
        if (!match) {
            return undefined;
        }

        const [, amount, unit] = match;
        const numericAmount = Number.parseInt(amount, 10);
        if (!Number.isFinite(numericAmount)) {
            return undefined;
        }

        const unitMultiplier: Record<string, number> = {
            s: 1,
            m: 60,
            h: 60 * 60,
            d: 60 * 60 * 24,
            w: 60 * 60 * 24 * 7,
            y: 60 * 60 * 24 * 365,
        };

        const multiplier = unitMultiplier[unit.toLowerCase()];
        if (!multiplier) {
            return undefined;
        }

        return Math.max(0, numericAmount * multiplier);
    }

    return undefined;
}

function resolveCacheHeaders(
    headersConfig: StaticAssetCacheHeadersConfig | undefined,
): { maxAge: number; immutable: boolean } {
    const maxAge =
        parseDurationToSeconds(headersConfig?.max_age) ?? DEFAULT_MAX_AGE_SECONDS;
    const immutable = Boolean(headersConfig?.immutable);
    return { maxAge, immutable };
}

function createHeadersFileContent({
    maxAge,
    immutable,
}: {
    maxAge: number;
    immutable: boolean;
}): string {
    const directives = [`public`, `max-age=${maxAge}`];
    if (immutable) {
        directives.push("immutable");
    }

    return `# Generated by scripts/generate-headers.ts\n/_next/static/*\n  Cache-Control: ${directives.join(",")}\n`;
}

async function main() {
    const config = resolveConfigSync();
    const cacheHeaders = config.performance?.static_assets?.cache_headers;
    const { maxAge, immutable } = resolveCacheHeaders(cacheHeaders);

    const content = createHeadersFileContent({ maxAge, immutable });
    writeFileSync(OUTPUT_PATH, content, "utf8");
    console.log(
        `[config] Wrote static headers to ${path.relative(process.cwd(), OUTPUT_PATH)} (max-age=${maxAge}, immutable=${immutable})`,
    );
}

void main();
