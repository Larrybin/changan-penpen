Id,Rule Name,Product,Severity,Status,Confidence,Category,Is Pro Rule,Assistant Triage Result,Assistant Triage Reason,Assistant Component,Repository Name,Repository Url,Line Of Code Url,Semgrep Platform Link,Created At,Last Opened At,Branch,Triaged At,Triage Comment,Triage Reason,Rule Description
272378771,generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key,Code,High,Open,Low,security,False,,,Developer Scripts,Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main/blob/37eb498ad65db0a04ce96d131410bb98719d07ed/.github/workflows/sonarcloud.yml#L35,https://semgrep.dev/orgs/binben168er_personal_org/findings/272378771,2025-10-10 03:34:42.957037,2025-10-10 03:34:42.075796,refs/heads/main,,,,SonarQube Docs API Key detected
272378770,javascript.lang.security.audit.spawn-shell-true.spawn-shell-true,Code,High,Open,Low,security,False,,,Developer Scripts,Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main/blob/37eb498ad65db0a04ce96d131410bb98719d07ed/scripts/push-fix2.mjs#L44,https://semgrep.dev/orgs/binben168er_personal_org/findings/272378770,2025-10-10 03:34:42.957021,2025-10-10 03:34:42.075791,refs/heads/main,,,,"Found '$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead."
272378769,javascript.lang.security.audit.spawn-shell-true.spawn-shell-true,Code,High,Open,Low,security,False,,,Developer Scripts,Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main/blob/37eb498ad65db0a04ce96d131410bb98719d07ed/scripts/push-fix2.mjs#L67,https://semgrep.dev/orgs/binben168er_personal_org/findings/272378769,2025-10-10 03:34:42.957004,2025-10-10 03:34:42.075786,refs/heads/main,,,,"Found '$SPAWN' with '{shell: true}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead."
272378768,javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop,Code,Medium,Open,Low,security,False,,,Developer Scripts,Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main/blob/37eb498ad65db0a04ce96d131410bb98719d07ed/scripts/translate-locales.ts#L128,https://semgrep.dev/orgs/binben168er_personal_org/findings/272378768,2025-10-10 03:34:42.956988,2025-10-10 03:34:42.075781,refs/heads/main,,,,"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
272378767,javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop,Code,Medium,Open,Low,security,False,,,Developer Scripts,Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main/blob/37eb498ad65db0a04ce96d131410bb98719d07ed/scripts/translate-locales.ts#L135,https://semgrep.dev/orgs/binben168er_personal_org/findings/272378767,2025-10-10 03:34:42.956971,2025-10-10 03:34:42.075775,refs/heads/main,,,,"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
272378766,javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop,Code,Medium,Open,Low,security,False,,,Developer Scripts,Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main/blob/37eb498ad65db0a04ce96d131410bb98719d07ed/scripts/translate-locales.ts#L184,https://semgrep.dev/orgs/binben168er_personal_org/findings/272378766,2025-10-10 03:34:42.956954,2025-10-10 03:34:42.075770,refs/heads/main,,,,"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
272378765,javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop,Code,Medium,Open,Low,security,False,,,Developer Scripts,Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main/blob/37eb498ad65db0a04ce96d131410bb98719d07ed/scripts/translate-locales.ts#L204,https://semgrep.dev/orgs/binben168er_personal_org/findings/272378765,2025-10-10 03:34:42.956938,2025-10-10 03:34:42.075765,refs/heads/main,,,,"Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object."
272378764,typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml,Code,Medium,Open,Medium,security,False,,,,Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main/blob/37eb498ad65db0a04ce96d131410bb98719d07ed/src/components/seo/custom-html.tsx#L58,https://semgrep.dev/orgs/binben168er_personal_org/findings/272378764,2025-10-10 03:34:42.956921,2025-10-10 03:34:42.075759,refs/heads/main,,,,"Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML."
272378763,javascript.express.log.console-log-express.console-log-express,Code,Low,Open,High,security,False,,,Payments,Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main/blob/37eb498ad65db0a04ce96d131410bb98719d07ed/src/app/api/webhooks/creem/route.ts#L68,https://semgrep.dev/orgs/binben168er_personal_org/findings/272378763,2025-10-10 03:34:42.956902,2025-10-10 03:34:42.075752,refs/heads/main,,,,Detected a logger that logs user input without properly neutralizing the output. The log message could contain characters like ` ` and ` ` and cause an attacker to forge log entries or include malicious content into the logs. Use proper input validation and/or output encoding to prevent log entries from being forged.
272378762,javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring,Code,Low,Open,Low,security,False,,,,Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main,https://github.com/Larrybin/fullstack-next-cloudflare-main/blob/37eb498ad65db0a04ce96d131410bb98719d07ed/src/lib/rate-limit.ts#L75,https://semgrep.dev/orgs/binben168er_personal_org/findings/272378762,2025-10-10 03:34:42.956850,2025-10-10 03:34:42.075737,refs/heads/main,,,,"Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string."
